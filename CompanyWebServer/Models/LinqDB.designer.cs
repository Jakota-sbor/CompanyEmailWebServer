#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CompanyWebServer.Models
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;
    using System.ComponentModel.DataAnnotations;

    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EmailsDB")]
	public partial class LinqDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertEmails(Emails instance);
    partial void UpdateEmails(Emails instance);
    partial void DeleteEmails(Emails instance);
    #endregion
		
		public LinqDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["EmailsDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Emails> Emails
		{
			get
			{
				return this.GetTable<Emails>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteEmail")]
		public int DeleteEmail([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertEmail")]
		public int InsertEmail([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string emailto, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(100)")] string emailfrom, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(200)")] string emailtopic, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string emailtext)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), emailto, emailfrom, emailtopic, emailtext);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.EditEmail")]
		public int EditEmail([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EmailTime", DbType="SmallDateTime")] System.Nullable<System.DateTime> emailTime, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EmailTo", DbType="VarChar(100)")] string emailTo, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EmailFrom", DbType="VarChar(100)")] string emailFrom, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EmailTopic", DbType="NVarChar(200)")] string emailTopic, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EmailText", DbType="NVarChar(MAX)")] string emailText)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, emailTime, emailTo, emailFrom, emailTopic, emailText);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Emails")]
	public partial class Emails : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _EmailTime;
		
		private string _EmailTo;
		
		private string _EmailFrom;
		
		private string _EmailTopic;
		
		private string _EmailText;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEmailTimeChanging(System.DateTime value);
    partial void OnEmailTimeChanged();
    partial void OnEmailToChanging(string value);
    partial void OnEmailToChanged();
    partial void OnEmailFromChanging(string value);
    partial void OnEmailFromChanged();
    partial void OnEmailTopicChanging(string value);
    partial void OnEmailTopicChanged();
    partial void OnEmailTextChanging(string value);
    partial void OnEmailTextChanged();
    #endregion
		
		public Emails()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
        [DataType(DataType.Date)]
        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:dd.MM.yyyy}")]
        [Display(Name = "Время отправки")]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime EmailTime
		{
			get
			{
				return this._EmailTime;
			}
			set
			{
				if ((this._EmailTime != value))
				{
					this.OnEmailTimeChanging(value);
					this.SendPropertyChanging();
					this._EmailTime = value;
					this.SendPropertyChanged("EmailTime");
					this.OnEmailTimeChanged();
				}
			}
		}
        [Display(Name = "Адресат")]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailTo", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string EmailTo
		{
			get
			{
				return this._EmailTo;
			}
			set
			{
				if ((this._EmailTo != value))
				{
					this.OnEmailToChanging(value);
					this.SendPropertyChanging();
					this._EmailTo = value;
					this.SendPropertyChanged("EmailTo");
					this.OnEmailToChanged();
				}
			}
		}
        [Display(Name = "Отправитель")]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailFrom", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string EmailFrom
		{
			get
			{
				return this._EmailFrom;
			}
			set
			{
				if ((this._EmailFrom != value))
				{
					this.OnEmailFromChanging(value);
					this.SendPropertyChanging();
					this._EmailFrom = value;
					this.SendPropertyChanged("EmailFrom");
					this.OnEmailFromChanged();
				}
			}
		}
        [Display(Name = "Тема")]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailTopic", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string EmailTopic
		{
			get
			{
				return this._EmailTopic;
			}
			set
			{
				if ((this._EmailTopic != value))
				{
					this.OnEmailTopicChanging(value);
					this.SendPropertyChanging();
					this._EmailTopic = value;
					this.SendPropertyChanged("EmailTopic");
					this.OnEmailTopicChanged();
				}
			}
		}
        [Display(Name = "Сообщение")]
        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string EmailText
		{
			get
			{
				return this._EmailText;
			}
			set
			{
				if ((this._EmailText != value))
				{
					this.OnEmailTextChanging(value);
					this.SendPropertyChanging();
					this._EmailText = value;
					this.SendPropertyChanged("EmailText");
					this.OnEmailTextChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
